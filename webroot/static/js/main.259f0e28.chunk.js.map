{"version":3,"sources":["redux/types.ts","redux/store.ts","redux/actionTypes.ts","redux/backEnd.ts","redux/selectors.ts","redux/hooks.ts","utils/index.ts","views/ServiceFormModal.tsx","views/EditServiceForm.tsx","views/ServiceListItem.tsx","views/ServiceList.tsx","views/NewServiceForm.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ServiceStatus","defaultState","services","store","createStore","state","action","type","payload","headers","Accept","deleteService","a","id","fetch","method","editService","serivce","body","JSON","stringify","createService","getServices","res","json","createSelector","useServices","dispatch","useDispatch","useSelector","useCallback","service","backEnd","loadServices","response","isUrlValid","url","URL","e","ServiceFormModal","props","onSave","data","name","open","loading","onCancel","error","title","useState","urlInput","nameInput","formData","setFormData","inputChangeHandler","value","onSaveClick","Modal","size","Header","Content","Form","Message","header","negative","content","Field","Input","onChange","target","style","width","placeholder","Actions","Button","onClick","primary","EditServiceForm","isOpen","setIsOpen","setError","isLoading","setIsLoading","newService","statusColor","OK","FAIL","UNKNOWN","ServiceListItem","status","createdAt","onDeleteClick","window","confirm","Grid","verticalAlign","columns","padded","stackable","Column","Container","flexDirection","display","alignItems","Icon","color","marginLeft","Subheader","disabled","ServiceList","useEffect","intervalId","setInterval","clearInterval","List","relaxed","divided","map","item","Item","key","NewServiceForm","icon","labelPosition","App","paddingTop","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.259f0e28.chunk.js","sourcesContent":["export enum ServiceStatus {\n\tOK = 'OK',\n\tUNKNOWN = 'UNKNOWN',\n\tFAIL = 'FAIL',\n}\n\nexport interface ServiceTransferObject {\n\tname: string;\n\turl: string;\n}\n\nexport interface Service {\n\tid?: string;\n\tname: string;\n\tstatus: ServiceStatus;\n\turl: string;\n\tcreatedAt: string;\n}\n\nexport interface IStoreState {\n\tservices: Array<Service>;\n}\n","import { createStore } from \"redux\";\nimport { IStoreState } from \"./types\";\nimport { LOAD_SERVICES } from \"./actionTypes\";\n\nconst defaultState: IStoreState = {\n  services: [],\n};\n\nconst appReducer = (state = defaultState, action: any): IStoreState => {\n  if (action.type === LOAD_SERVICES) {\n    return {\n      services: action.payload,\n    };\n  }\n\n  return state;\n};\n\nconst store = createStore(appReducer);\n\nexport default store;\n","export const LOAD_SERVICES = \"LOAD_SERVICES\";\n","import { ServiceTransferObject } from './types';\n\nconst headers = {\n\tAccept: 'application/json, text/plain, */*',\n\t'Content-Type': 'application/json',\n};\n\nconst deleteService = async (id = '') => {\n\tif (!id) {\n\t\treturn;\n\t}\n\n\treturn await fetch(`/api/service/${id}`, {\n\t\tmethod: 'delete',\n\t\theaders,\n\t});\n};\n\nconst editService = async (id = '', serivce: ServiceTransferObject) => {\n\tif (!id) {\n\t\treturn;\n\t}\n\n\treturn await fetch(`/api/service/${id}`, {\n\t\tmethod: 'put',\n\t\theaders,\n\t\tbody: JSON.stringify(serivce),\n\t});\n};\n\nconst createService = async (serivce: ServiceTransferObject) =>\n\tawait fetch('/api/service', {\n\t\tmethod: 'post',\n\t\theaders,\n\t\tbody: JSON.stringify(serivce),\n\t});\n\nconst getServices = async () => {\n\tconst res = await fetch('/api/service', {\n\t\tmethod: 'get',\n\t\theaders,\n\t});\n\treturn await res.json();\n};\n\nexport default {\n\tdeleteService,\n\teditService,\n\tcreateService,\n\tgetServices,\n};\n","import { IStoreState } from \"./types\";\nimport { createSelector } from \"reselect\";\n\nexport const servicesSelector = (state: IStoreState) => state.services;\n\nexport const getServices = createSelector(\n  servicesSelector,\n  (services) => services\n);\n","import backEnd from './backEnd';\nimport { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { LOAD_SERVICES } from './actionTypes';\nimport { getServices } from './selectors';\nimport { ServiceTransferObject } from './types';\n\nexport const useServices = () => {\n\tconst dispatch = useDispatch();\n\tconst services = useSelector(getServices);\n\n\tconst createService = useCallback(async (service: ServiceTransferObject) => {\n\t\treturn await backEnd.createService(service);\n\t}, []);\n\n\tconst deleteService = useCallback(async (id = '') => {\n\t\treturn await backEnd.deleteService(id);\n\t}, []);\n\n\tconst editService = useCallback(async (id = '', service: ServiceTransferObject) => {\n\t\treturn await backEnd.editService(id, service);\n\t}, []);\n\n\tconst loadServices = useCallback(async () => {\n\t\tconst response = await backEnd.getServices();\n\t\tdispatch({\n\t\t\ttype: LOAD_SERVICES,\n\t\t\tpayload: response,\n\t\t});\n\t}, [dispatch]);\n\n\treturn {\n\t\tcreateService,\n\t\tdeleteService,\n\t\teditService,\n\t\tloadServices,\n\t\tservices,\n\t};\n};\n","export const isUrlValid = (url: string) => {\n\ttry {\n\t\tnew URL(url);\n\t\treturn true;\n\t} catch (e) {\n\t\treturn false;\n\t}\n};\n","import React, { useState } from 'react';\nimport { Input, Button, Modal, Form, Message } from 'semantic-ui-react';\nimport { ServiceTransferObject } from 'src/redux/types';\n\ninterface IProps {\n\ttitle?: string;\n\terror?: string;\n\tdata?: ServiceTransferObject;\n\tonSave?: (data: ServiceTransferObject) => void;\n\tonCancel?: () => void;\n\topen?: boolean;\n\tloading?: boolean;\n}\nconst ServiceFormModal = (props: IProps) => {\n\tconst { onSave, data = { url: '', name: '' }, open, loading, onCancel, error, title } = props;\n\tconst [formData, setFormData] = useState({\n\t\turlInput: data.url,\n\t\tnameInput: data.name,\n\t});\n\n\tconst inputChangeHandler = (name: string, value: string) => {\n\t\tsetFormData({\n\t\t\t...formData,\n\t\t\t[name]: value,\n\t\t});\n\t};\n\n\tconst onSaveClick = async () => {\n\t\tonSave &&\n\t\t\tonSave({\n\t\t\t\turl: formData.urlInput,\n\t\t\t\tname: formData.nameInput,\n\t\t\t});\n\t};\n\n\treturn (\n\t\t<Modal open={open} size=\"mini\">\n\t\t\t{title && <Modal.Header>{title}</Modal.Header>}\n\t\t\t<Modal.Content>\n\t\t\t\t<Form>\n\t\t\t\t\t{error && <Message header=\"Error\" negative content={error} />}\n\t\t\t\t\t<Form.Field>\n\t\t\t\t\t\t<label>Name</label>\n\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\tvalue={formData.nameInput}\n\t\t\t\t\t\t\tonChange={(e) => inputChangeHandler('nameInput', e.target.value)}\n\t\t\t\t\t\t\tstyle={{ width: '100%' }}\n\t\t\t\t\t\t\tplaceholder=\"Some Name\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Form.Field>\n\t\t\t\t\t<Form.Field>\n\t\t\t\t\t\t<label>URL</label>\n\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\tvalue={formData.urlInput}\n\t\t\t\t\t\t\tonChange={(e) => inputChangeHandler('urlInput', e.target.value)}\n\t\t\t\t\t\t\tstyle={{ width: '100%' }}\n\t\t\t\t\t\t\tplaceholder=\"http://service.com\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Form.Field>\n\t\t\t\t</Form>\n\t\t\t</Modal.Content>\n\t\t\t<Modal.Actions>\n\t\t\t\t<Button onClick={onCancel}>Cancel</Button>\n\t\t\t\t<Button primary loading={loading} onClick={onSaveClick}>\n\t\t\t\t\tSave\n\t\t\t\t</Button>\n\t\t\t</Modal.Actions>\n\t\t</Modal>\n\t);\n};\n\nexport default ServiceFormModal;\n","import React, { useState } from 'react';\nimport { Button } from 'semantic-ui-react';\nimport { useServices } from 'src/redux/hooks';\nimport { isUrlValid } from 'src/utils';\nimport ServiceFormModal from './ServiceFormModal';\nimport { ServiceTransferObject, Service } from 'src/redux/types';\n\ninterface IProps {\n\tdata: Service;\n}\n\nconst EditServiceForm = (props: IProps) => {\n\tconst { data } = props;\n\tconst { id, url, name } = data;\n\tconst [isOpen, setIsOpen] = useState(false);\n\tconst [error, setError] = useState('');\n\tconst [isLoading, setIsLoading] = useState(false);\n\tconst { loadServices, editService } = useServices();\n\n\tconst onSaveClick = async (newService: ServiceTransferObject) => {\n\t\tif (isUrlValid(newService.url)) {\n\t\t\tsetIsLoading(true);\n\t\t\tawait editService(id, newService);\n\t\t\tawait loadServices();\n\t\t\tsetIsLoading(false);\n\t\t\tsetIsOpen(false);\n\t\t} else {\n\t\t\tsetError('Invalid Url');\n\t\t}\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<Button\n\t\t\t\tonClick={() => {\n\t\t\t\t\tsetIsOpen(true);\n\t\t\t\t}}>\n\t\t\t\tEdit\n\t\t\t</Button>\n\t\t\t<ServiceFormModal\n\t\t\t\ttitle=\"Edit service\"\n\t\t\t\terror={error}\n\t\t\t\tdata={{ url, name }}\n\t\t\t\topen={isOpen}\n\t\t\t\tloading={isLoading}\n\t\t\t\tonSave={onSaveClick}\n\t\t\t\tonCancel={() => setIsOpen(false)}\n\t\t\t/>\n\t\t</>\n\t);\n};\n\nexport default EditServiceForm;\n","import React, { useState } from 'react';\nimport { ServiceStatus, Service } from 'src/redux/types';\nimport { SemanticCOLORS, Grid, Button, Header, Container, Icon } from 'semantic-ui-react';\nimport EditServiceForm from './EditServiceForm';\nimport { useServices } from 'src/redux/hooks';\n\nconst statusColor: { [x: string]: SemanticCOLORS } = {\n\t[ServiceStatus.OK]: 'green',\n\t[ServiceStatus.FAIL]: 'red',\n\t[ServiceStatus.UNKNOWN]: 'blue',\n};\n\ninterface IProps {\n\tdata: Service;\n}\n\nconst ServiceListItem = ({ data }: IProps) => {\n\tconst { id, status, name, url, createdAt } = data;\n\n\tconst { deleteService, loadServices } = useServices();\n\tconst [isLoading, setIsLoading] = useState(false);\n\n\tconst renderServiceInfo = () => {\n\t\treturn (\n\t\t\t<Container style={{ flexDirection: 'row', display: 'flex', alignItems: 'center' }}>\n\t\t\t\t<Icon size=\"large\" name=\"circle\" color={statusColor[status]} />\n\t\t\t\t<Header style={{ marginLeft: 18 }}>\n\t\t\t\t\t{name}\n\t\t\t\t\t<Header.Subheader>{url}</Header.Subheader>\n\t\t\t\t\t<Header.Subheader>{createdAt}</Header.Subheader>\n\t\t\t\t</Header>\n\t\t\t</Container>\n\t\t);\n\t};\n\n\tconst onDeleteClick = async () => {\n\t\tconst result = window.confirm('Are you sure?');\n\t\tif (!result) {\n\t\t\treturn;\n\t\t}\n\n\t\tsetIsLoading(true);\n\t\tawait deleteService(id);\n\t\tsetIsLoading(false);\n\t\tawait loadServices();\n\t};\n\n\treturn (\n\t\t<Grid verticalAlign=\"middle\" columns=\"equal\" padded stackable>\n\t\t\t<Grid.Column width=\"10\">{renderServiceInfo()}</Grid.Column>\n\t\t\t<Grid.Column>\n\t\t\t\t<Grid>\n\t\t\t\t\t<EditServiceForm data={data} />\n\t\t\t\t\t<Button color=\"red\" onClick={onDeleteClick} disabled={isLoading}>\n\t\t\t\t\t\tDelete\n\t\t\t\t\t</Button>\n\t\t\t\t</Grid>\n\t\t\t</Grid.Column>\n\t\t</Grid>\n\t);\n};\n\nexport default ServiceListItem;\n","import React, { useEffect } from 'react';\nimport { List } from 'semantic-ui-react';\nimport { useServices } from 'src/redux/hooks';\nimport ServiceListItem from './ServiceListItem';\n\nconst ServiceList = () => {\n\tconst { services, loadServices } = useServices();\n\n\tuseEffect(() => {\n\t\tloadServices();\n\n\t\tconst intervalId = setInterval(() => {\n\t\t\tloadServices();\n\t\t}, 1000 * 30);\n\n\t\treturn () => {\n\t\t\tclearInterval(intervalId);\n\t\t};\n\t}, [loadServices]);\n\n\treturn (\n\t\t<List relaxed divided>\n\t\t\t{services.map((item) => {\n\t\t\t\treturn (\n\t\t\t\t\t<List.Item key={item.id}>\n\t\t\t\t\t\t<ServiceListItem data={item} />\n\t\t\t\t\t</List.Item>\n\t\t\t\t);\n\t\t\t})}\n\t\t</List>\n\t);\n};\n\nexport default ServiceList;\n","import React, { useState } from 'react';\nimport { Button, Icon } from 'semantic-ui-react';\nimport { useServices } from 'src/redux/hooks';\nimport { isUrlValid } from 'src/utils';\nimport ServiceFormModal from './ServiceFormModal';\nimport { ServiceTransferObject } from 'src/redux/types';\n\nconst NewServiceForm = () => {\n\tconst [isOpen, setIsOpen] = useState(false);\n\tconst [error, setError] = useState('');\n\tconst [isLoading, setIsLoading] = useState(false);\n\tconst { loadServices, createService } = useServices();\n\n\tconst onSaveClick = async (newService: ServiceTransferObject) => {\n\t\tif (isUrlValid(newService.url)) {\n\t\t\tsetIsLoading(true);\n\t\t\tawait createService(newService);\n\t\t\tawait loadServices();\n\t\t\tsetIsLoading(false);\n\t\t\tsetIsOpen(false);\n\t\t} else {\n\t\t\tsetError('Invalid Url');\n\t\t}\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<Button\n\t\t\t\ticon\n\t\t\t\tlabelPosition=\"right\"\n\t\t\t\tonClick={() => {\n\t\t\t\t\tsetIsOpen(true);\n\t\t\t\t}}>\n\t\t\t\tCreate New Service\n\t\t\t\t<Icon name=\"edit\" />\n\t\t\t</Button>\n\t\t\t<ServiceFormModal\n\t\t\t\ttitle=\"New service\"\n\t\t\t\terror={error}\n\t\t\t\topen={isOpen}\n\t\t\t\tloading={isLoading}\n\t\t\t\tonSave={onSaveClick}\n\t\t\t\tonCancel={() => setIsOpen(false)}\n\t\t\t/>\n\t\t</>\n\t);\n};\n\nexport default NewServiceForm;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport ServiceList from './views/ServiceList';\nimport NewServiceForm from './views/NewServiceForm';\nimport { Container } from 'semantic-ui-react';\n\nfunction App() {\n\treturn (\n\t\t<Provider store={store}>\n\t\t\t<Container style={{ paddingTop: 100 }}>\n\t\t\t\t<NewServiceForm />\n\t\t\t\t<ServiceList />\n\t\t\t</Container>\n\t\t</Provider>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"semantic-ui-css/semantic.min.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}