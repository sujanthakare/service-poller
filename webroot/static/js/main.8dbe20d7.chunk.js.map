{"version":3,"sources":["redux/types.ts","redux/store.ts","redux/actionTypes.ts","redux/backEnd.ts","redux/selectors.ts","redux/hooks.ts","utils/index.ts","views/ServiceListItemEditor.tsx","views/ServiceListItem.tsx","views/ServiceList.tsx","views/ServiceForm.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ServiceStatus","defaultState","services","store","createStore","state","action","type","payload","headers","Accept","deleteService","url","fetch","method","body","JSON","stringify","editService","oldUrl","createService","getServices","a","res","json","createSelector","useServices","dispatch","useDispatch","useSelector","useCallback","backEnd","loadServices","response","isUrlValid","URL","e","ServiceListItemEditor","props","name","onCancel","useState","error","setError","inputValue","setInputValue","isLoading","setIsLoading","onSaveClick","Popup","style","color","content","open","position","trigger","Input","value","onChange","target","width","placeholder","Button","Group","loading","disabled","onClick","statusColor","OK","FAIL","UNKNOWN","ServiceListItem","status","editMode","setEditMode","onDeleteClick","window","confirm","Grid","verticalAlign","columns","padded","stackable","Column","textAlign","ServiceList","useEffect","intervalId","setInterval","clearInterval","List","relaxed","divided","map","item","Item","key","ServiceForm","attached","App","Container","paddingTop","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.8dbe20d7.chunk.js","sourcesContent":["export enum ServiceStatus {\n  OK = \"OK\",\n  UNKNOWN = \"UNKNOWN\",\n  FAIL = \"FAIL\",\n}\n\nexport interface IStoreState {\n  services: Array<{\n    name: string;\n    status: ServiceStatus;\n  }>;\n}\n","import { createStore } from \"redux\";\nimport { IStoreState } from \"./types\";\nimport { LOAD_SERVICES } from \"./actionTypes\";\n\nconst defaultState: IStoreState = {\n  services: [],\n};\n\nconst appReducer = (state = defaultState, action: any): IStoreState => {\n  if (action.type === LOAD_SERVICES) {\n    return {\n      services: action.payload,\n    };\n  }\n\n  return state;\n};\n\nconst store = createStore(appReducer);\n\nexport default store;\n","export const LOAD_SERVICES = \"LOAD_SERVICES\";\n","const headers = {\n  Accept: \"application/json, text/plain, */*\",\n  \"Content-Type\": \"application/json\",\n};\n\nconst deleteService = (url: string) => {\n  return fetch(\"/service\", {\n    method: \"delete\",\n    headers,\n    body: JSON.stringify({ url }),\n  });\n};\n\nconst editService = (oldUrl: string, url: string) => {\n  return fetch(\"/service\", {\n    method: \"put\",\n    headers,\n    body: JSON.stringify({ url, oldUrl }),\n  });\n};\n\nconst createService = (url: string) =>\n  fetch(\"/service\", {\n    method: \"post\",\n    headers,\n    body: JSON.stringify({ url }),\n  });\n\nconst getServices = async () => {\n  const res = await fetch(\"/service\", {\n    method: \"get\",\n    headers,\n  });\n  return await res.json();\n};\n\nexport default {\n  deleteService,\n  editService,\n  createService,\n  getServices,\n};\n","import { IStoreState } from \"./types\";\nimport { createSelector } from \"reselect\";\n\nexport const servicesSelector = (state: IStoreState) => state.services;\n\nexport const getServices = createSelector(\n  servicesSelector,\n  (services) => services\n);\n","import backEnd from \"./backEnd\";\nimport { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { LOAD_SERVICES } from \"./actionTypes\";\nimport { getServices } from \"./selectors\";\n\nexport const useServices = () => {\n  const dispatch = useDispatch();\n  const services = useSelector(getServices);\n\n  const createService = useCallback(async (url: string) => {\n    return await backEnd.createService(url);\n  }, []);\n\n  const deleteService = useCallback(async (url: string) => {\n    return await backEnd.deleteService(url);\n  }, []);\n\n  const editService = useCallback(async (oldUrl: string, url: string) => {\n    return await backEnd.editService(oldUrl, url);\n  }, []);\n\n  const loadServices = useCallback(async () => {\n    const response = await backEnd.getServices();\n    dispatch({\n      type: LOAD_SERVICES,\n      payload: response,\n    });\n  }, [dispatch]);\n\n  return {\n    createService,\n    deleteService,\n    editService,\n    loadServices,\n    services,\n  };\n};\n","export const isUrlValid = (url: string) => {\n\ttry {\n\t\tnew URL(url);\n\t\treturn true;\n\t} catch (e) {\n\t\treturn false;\n\t}\n};\n","import React, { useState } from 'react';\nimport { Input, Button, Popup } from 'semantic-ui-react';\nimport { useServices } from 'src/redux/hooks';\nimport { isUrlValid } from 'src/utils';\n\ninterface IProps {\n\tname: string;\n\tonCancel?: () => void;\n}\n\nconst ServiceListItemEditor = (props: IProps) => {\n\tconst { name, onCancel } = props;\n\tconst [error, setError] = useState('');\n\tconst [inputValue, setInputValue] = useState(name);\n\tconst [isLoading, setIsLoading] = useState(false);\n\tconst { loadServices, editService } = useServices();\n\n\tconst onSaveClick = async () => {\n\t\tif (isUrlValid(inputValue)) {\n\t\t\tsetIsLoading(true);\n\t\t\tawait editService(name, inputValue);\n\t\t\tawait loadServices();\n\t\t\tsetInputValue('');\n\t\t\tsetIsLoading(false);\n\t\t} else {\n\t\t\tsetError('Invalid URL');\n\t\t}\n\t};\n\n\treturn (\n\t\t<Popup\n\t\t\tstyle={{\n\t\t\t\tcolor: 'red',\n\t\t\t}}\n\t\t\tcontent={error}\n\t\t\topen={!!error}\n\t\t\tposition=\"top left\"\n\t\t\ttrigger={\n\t\t\t\t<Input\n\t\t\t\t\terror={!!error}\n\t\t\t\t\tvalue={inputValue}\n\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\tsetError('');\n\t\t\t\t\t\tsetInputValue(e.target.value);\n\t\t\t\t\t}}\n\t\t\t\t\tstyle={{ width: '100%' }}\n\t\t\t\t\tplaceholder=\"http://service.com\"\n\t\t\t\t\taction={\n\t\t\t\t\t\t<Button.Group>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tloading={isLoading}\n\t\t\t\t\t\t\t\tdisabled={!inputValue || name === inputValue}\n\t\t\t\t\t\t\t\tonClick={onSaveClick}>\n\t\t\t\t\t\t\t\tSave\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t<Button onClick={onCancel}>Cancel</Button>\n\t\t\t\t\t\t</Button.Group>\n\t\t\t\t\t}\n\t\t\t\t/>\n\t\t\t}\n\t\t/>\n\t);\n};\n\nexport default ServiceListItemEditor;\n","import React, { useState } from 'react';\nimport { ServiceStatus } from 'src/redux/types';\nimport { SemanticCOLORS, Grid, Button } from 'semantic-ui-react';\nimport ServiceListItemEditor from './ServiceListItemEditor';\nimport { useServices } from 'src/redux/hooks';\n\nconst statusColor: { [x: string]: SemanticCOLORS } = {\n\t[ServiceStatus.OK]: 'green',\n\t[ServiceStatus.FAIL]: 'red',\n\t[ServiceStatus.UNKNOWN]: 'blue',\n};\n\ninterface IProps {\n\tname: string;\n\tstatus: ServiceStatus;\n}\n\nconst ServiceListItem = (props: IProps) => {\n\tconst { status, name } = props;\n\n\tconst { deleteService, loadServices } = useServices();\n\tconst [editMode, setEditMode] = useState(false);\n\tconst [isLoading, setIsLoading] = useState(false);\n\n\tconst renderStatus = () => {\n\t\treturn <p style={{ textAlign: 'center' }}>{status}</p>;\n\t};\n\n\tconst renderName = () => {\n\t\tif (editMode) {\n\t\t\treturn (\n\t\t\t\t<ServiceListItemEditor\n\t\t\t\t\tname={name}\n\t\t\t\t\tonCancel={() => {\n\t\t\t\t\t\tsetEditMode(false);\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t);\n\t\t}\n\n\t\treturn <p>{name}</p>;\n\t};\n\n\tconst onEditClick = () => {\n\t\tsetEditMode(true);\n\t};\n\tconst onDeleteClick = async () => {\n\t\tconst result = window.confirm('Are you sure?');\n\t\tif (!result) {\n\t\t\treturn;\n\t\t}\n\n\t\tsetIsLoading(true);\n\t\tawait deleteService(name);\n\t\tsetIsLoading(false);\n\t\tawait loadServices();\n\t};\n\n\treturn (\n\t\t<Grid verticalAlign=\"middle\" columns=\"equal\" padded stackable>\n\t\t\t<Grid.Column color={statusColor[status]}>{renderStatus()}</Grid.Column>\n\t\t\t<Grid.Column width=\"11\">{renderName()}</Grid.Column>\n\t\t\t<Grid.Column>\n\t\t\t\t<Button.Group>\n\t\t\t\t\t<Button onClick={onEditClick} disabled={editMode || isLoading}>\n\t\t\t\t\t\tEdit\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button onClick={onDeleteClick} disabled={isLoading}>\n\t\t\t\t\t\tDelete\n\t\t\t\t\t</Button>\n\t\t\t\t</Button.Group>\n\t\t\t</Grid.Column>\n\t\t</Grid>\n\t);\n};\n\nexport default ServiceListItem;\n","import React, { useEffect } from 'react';\nimport { List } from 'semantic-ui-react';\nimport { useServices } from 'src/redux/hooks';\nimport ServiceListItem from './ServiceListItem';\n\nconst ServiceList = () => {\n\tconst { services, loadServices } = useServices();\n\n\tuseEffect(() => {\n\t\tloadServices();\n\n\t\tconst intervalId = setInterval(() => {\n\t\t\tloadServices();\n\t\t}, 1000 * 30);\n\n\t\treturn () => {\n\t\t\tclearInterval(intervalId);\n\t\t};\n\t}, [loadServices]);\n\n\treturn (\n\t\t<List relaxed divided>\n\t\t\t{services.map((item) => {\n\t\t\t\treturn (\n\t\t\t\t\t<List.Item key={item.name}>\n\t\t\t\t\t\t<ServiceListItem name={item.name} status={item.status} />\n\t\t\t\t\t</List.Item>\n\t\t\t\t);\n\t\t\t})}\n\t\t</List>\n\t);\n};\n\nexport default ServiceList;\n","import React, { useState } from 'react';\nimport { Input, Button, Popup } from 'semantic-ui-react';\nimport { useServices } from 'src/redux/hooks';\nimport { isUrlValid } from 'src/utils';\n\nconst ServiceForm = () => {\n\tconst [error, setError] = useState('');\n\tconst [inputValue, setInputValue] = useState('');\n\tconst [isLoading, setIsLoading] = useState(false);\n\tconst { loadServices, createService } = useServices();\n\n\tconst onSaveClick = async () => {\n\t\tif (isUrlValid(inputValue)) {\n\t\t\tsetIsLoading(true);\n\t\t\tawait createService(inputValue);\n\t\t\tawait loadServices();\n\t\t\tsetInputValue('');\n\t\t\tsetIsLoading(false);\n\t\t} else {\n\t\t\tsetError('Invalid Url');\n\t\t}\n\t};\n\n\treturn (\n\t\t<Popup\n\t\t\tstyle={{\n\t\t\t\tcolor: 'red',\n\t\t\t}}\n\t\t\tcontent={error}\n\t\t\topen={!!error}\n\t\t\tposition=\"top left\"\n\t\t\ttrigger={\n\t\t\t\t<Input\n\t\t\t\t\terror={!!error}\n\t\t\t\t\tvalue={inputValue}\n\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\tsetError('');\n\t\t\t\t\t\tsetInputValue(e.target.value);\n\t\t\t\t\t}}\n\t\t\t\t\tstyle={{ width: '100%' }}\n\t\t\t\t\tplaceholder=\"http://service.com\"\n\t\t\t\t\taction={\n\t\t\t\t\t\t<Button attached loading={isLoading} disabled={!inputValue} onClick={onSaveClick}>\n\t\t\t\t\t\t\tSave\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t}\n\t\t\t\t/>\n\t\t\t}\n\t\t/>\n\t);\n};\n\nexport default ServiceForm;\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport ServiceList from \"./views/ServiceList\";\nimport ServiceForm from \"./views/ServiceForm\";\nimport { Container } from \"semantic-ui-react\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Container style={{ paddingTop: 100 }}>\n        <ServiceForm />\n        <ServiceList />\n      </Container>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"semantic-ui-css/semantic.min.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}